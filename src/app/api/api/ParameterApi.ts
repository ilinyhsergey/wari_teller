/**
 * Wari teller API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ParameterApi {

    protected basePath = 'http://localhost/teller_api/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * research B2B partner by name and partner informations
     * @summary find B2B partner info
     * @param sessionID 
     */
    public findB2BPartnerInformationsSessionIDGet1(sessionID: number, extraHttpRequestParams?: any): Observable<Array<models.B2BPartnerInformation>> {
        return this.findB2BPartnerInformationsSessionIDGet1WithHttpInfo(sessionID, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * provides a set of fileld of a merchant's form
     * @summary find merchant form
     * @param reference 
     */
    public findMerchantFormByReferenceGet1(reference: string, extraHttpRequestParams?: any): Observable<models.MerchantForm> {
        return this.findMerchantFormByReferenceGet1WithHttpInfo(reference, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * research a merchant by name or reference and provides merchant informations.
     * @summary find merchant info
     * @param reference 
     */
    public findMerchantInformationsByReferenceGet1(reference: string, extraHttpRequestParams?: any): Observable<Array<models.B2BPartnerInformation>> {
        return this.findMerchantInformationsByReferenceGet1WithHttpInfo(reference, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * [Implemented] provides all countries of the world.
     * @summary [Implemented] provides all countries of the world.
     */
    public getAllCountriesGet1(extraHttpRequestParams?: any): Observable<Array<models.GeoZone>> {
        return this.getAllCountriesGet1WithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * provides all the ID types used in Wari platform.
     * @summary provides all the ID types used in Wari platform.
     * @param sessionID 
     */
    public getAllIDtypesSessionIDGet1(sessionID: number, extraHttpRequestParams?: any): Observable<Array<models.PieceType>> {
        return this.getAllIDtypesSessionIDGet1WithHttpInfo(sessionID, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * provides all merchants in a country by category(TV,bill,water etc...).
     * @summary [Implemented] provides all merchants in a country by category(TV,bill,water etc...).
     * @param countryCode 
     * @param category 
     */
    public getAllMerchantInCountryByCategoryCountryCodeCategoryGet1(countryCode: number, category: string, extraHttpRequestParams?: any): Observable<Array<models.B2BPartnerInformation>> {
        return this.getAllMerchantInCountryByCategoryCountryCodeCategoryGet1WithHttpInfo(countryCode, category, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * provides all mobile operators in a country
     * @summary [Implemented] provides all mobile operators in a country
     * @param mobileCountryCode 
     */
    public getAllMobileOperatorsInCountryMobileCountryCodeGet1(mobileCountryCode: number, extraHttpRequestParams?: any): Observable<Array<models.MobileOperator>> {
        return this.getAllMobileOperatorsInCountryMobileCountryCodeGet1WithHttpInfo(mobileCountryCode, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * provides all transfer motifs used in Wari platform.
     * @summary provides all transfer motifs used in Wari platform.
     * @param sessionID 
     */
    public getAllTransferMotifsSessionIDGet1(sessionID: number, extraHttpRequestParams?: any): Observable<Array<models.Motif>> {
        return this.getAllTransferMotifsSessionIDGet1WithHttpInfo(sessionID, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * provides all countries where Wari platform can send money.
     * @summary provides all countries where Wari platform can send money.
     * @param sessionID 
     */
    public getAvailableDestinationCountriesSessionIDGet1(sessionID: number, extraHttpRequestParams?: any): Observable<Array<models.GeoZone>> {
        return this.getAvailableDestinationCountriesSessionIDGet1WithHttpInfo(sessionID, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * [Implemented] provides country by id.
     * @summary [Implemented] provides country by id.
     * @param countryId 
     */
    public getCountryGet1(countryId: number, extraHttpRequestParams?: any): Observable<models.GeoZone> {
        return this.getCountryGet1WithHttpInfo(countryId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * get informations(name, mobile number, addresses etc...) of all pos services of the network.
     * @summary get informations(name, mobile number, addresses etc...) of all pos services of the network.
     * @param sessionID 
     */
    public getInformationsSessionIDGet1(sessionID: number, extraHttpRequestParams?: any): Observable<Array<models.NetworkInformation>> {
        return this.getInformationsSessionIDGet1WithHttpInfo(sessionID, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * find B2B partner info
     * research B2B partner by name and partner informations
     * @param sessionID 
     */
    public findB2BPartnerInformationsSessionIDGet1WithHttpInfo(sessionID: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/parameter/findB2BPartnerInformations/${sessionID}'
                    .replace('${' + 'sessionID' + '}', String(sessionID));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling findB2BPartnerInformationsSessionIDGet1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * find merchant form
     * provides a set of fileld of a merchant&#39;s form
     * @param reference 
     */
    public findMerchantFormByReferenceGet1WithHttpInfo(reference: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/parameter/findMerchantFormByReference/${reference}'
                    .replace('${' + 'reference' + '}', String(reference));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'reference' is not null or undefined
        if (reference === null || reference === undefined) {
            throw new Error('Required parameter reference was null or undefined when calling findMerchantFormByReferenceGet1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * find merchant info
     * research a merchant by name or reference and provides merchant informations.
     * @param reference 
     */
    public findMerchantInformationsByReferenceGet1WithHttpInfo(reference: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/parameter/findMerchantInformations/${reference}'
                    .replace('${' + 'reference' + '}', String(reference));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'reference' is not null or undefined
        if (reference === null || reference === undefined) {
            throw new Error('Required parameter reference was null or undefined when calling findMerchantInformationsByReferenceGet1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * [Implemented] provides all countries of the world.
     * [Implemented] provides all countries of the world.
     */
    public getAllCountriesGet1WithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/parameter/getAllCountries';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * provides all the ID types used in Wari platform.
     * provides all the ID types used in Wari platform.
     * @param sessionID 
     */
    public getAllIDtypesSessionIDGet1WithHttpInfo(sessionID: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/parameter/getAllIDtypes/${sessionID}'
                    .replace('${' + 'sessionID' + '}', String(sessionID));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling getAllIDtypesSessionIDGet1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * [Implemented] provides all merchants in a country by category(TV,bill,water etc...).
     * provides all merchants in a country by category(TV,bill,water etc...).
     * @param countryCode 
     * @param category 
     */
    public getAllMerchantInCountryByCategoryCountryCodeCategoryGet1WithHttpInfo(countryCode: number, category: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/parameter/getAllMerchantInCountryByCategory/${countryCode}/${category}'
                    .replace('${' + 'countryCode' + '}', String(countryCode))
                    .replace('${' + 'category' + '}', String(category));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'countryCode' is not null or undefined
        if (countryCode === null || countryCode === undefined) {
            throw new Error('Required parameter countryCode was null or undefined when calling getAllMerchantInCountryByCategoryCountryCodeCategoryGet1.');
        }
        // verify required parameter 'category' is not null or undefined
        if (category === null || category === undefined) {
            throw new Error('Required parameter category was null or undefined when calling getAllMerchantInCountryByCategoryCountryCodeCategoryGet1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * [Implemented] provides all mobile operators in a country
     * provides all mobile operators in a country
     * @param mobileCountryCode 
     */
    public getAllMobileOperatorsInCountryMobileCountryCodeGet1WithHttpInfo(mobileCountryCode: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/parameter/getAllMobileOperatorsInCountry/${mobileCountryCode}'
                    .replace('${' + 'mobileCountryCode' + '}', String(mobileCountryCode));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mobileCountryCode' is not null or undefined
        if (mobileCountryCode === null || mobileCountryCode === undefined) {
            throw new Error('Required parameter mobileCountryCode was null or undefined when calling getAllMobileOperatorsInCountryMobileCountryCodeGet1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * provides all transfer motifs used in Wari platform.
     * provides all transfer motifs used in Wari platform.
     * @param sessionID 
     */
    public getAllTransferMotifsSessionIDGet1WithHttpInfo(sessionID: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/parameter/getAllTransferMotifs/${sessionID}'
                    .replace('${' + 'sessionID' + '}', String(sessionID));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling getAllTransferMotifsSessionIDGet1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * provides all countries where Wari platform can send money.
     * provides all countries where Wari platform can send money.
     * @param sessionID 
     */
    public getAvailableDestinationCountriesSessionIDGet1WithHttpInfo(sessionID: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/parameter/getAvailableDestinationCountries/${sessionID}'
                    .replace('${' + 'sessionID' + '}', String(sessionID));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling getAvailableDestinationCountriesSessionIDGet1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * [Implemented] provides country by id.
     * [Implemented] provides country by id.
     * @param countryId 
     */
    public getCountryGet1WithHttpInfo(countryId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/parameter/getCountry/${countryId}'
                    .replace('${' + 'countryId' + '}', String(countryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'countryId' is not null or undefined
        if (countryId === null || countryId === undefined) {
            throw new Error('Required parameter countryId was null or undefined when calling getCountryGet1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * get informations(name, mobile number, addresses etc...) of all pos services of the network.
     * get informations(name, mobile number, addresses etc...) of all pos services of the network.
     * @param sessionID 
     */
    public getInformationsSessionIDGet1WithHttpInfo(sessionID: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/parameter/getInformations/${sessionID}'
                    .replace('${' + 'sessionID' + '}', String(sessionID));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling getInformationsSessionIDGet1.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (bearer) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
